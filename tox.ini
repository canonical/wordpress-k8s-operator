# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist=True
envlist = lint, unit, static, coverage-report
skip_missing_interpreters = True

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
allowlist_externals = docker

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:src-docs]
allowlist_externals=sh
description = Generate documentation for src
deps =
    cosl
    lazydocs
    -r{toxinidir}/requirements.txt
commands =
    ; can't run lazydocs directly due to needing to run it on src/*.py which produces an invocation error in tox
    sh generate-src-docs.sh

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    codespell
    flake8<6.0.0
    flake8-builtins
    flake8-copyright
    flake8-docstrings>=1.6.0
    flake8-docstrings-complete>=1.0.4
    flake8-test-docs
    isort
    mypy
    pep8-naming
    pydocstyle
    pylint
    pyproject-flake8<6.0.0
    pytest_operator
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/tests/integration/requirements.txt
commands =
    codespell {toxinidir} \
      --skip {toxinidir}/.git \
      --skip {toxinidir}/.tox \
      --skip {toxinidir}/build \
      --skip {toxinidir}/lib \
      --skip {toxinidir}/venv \
      --skip {toxinidir}/.mypy_cache
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}
    mypy {[vars]all_path}
    pydocstyle {[vars]src_path}
    pylint {[vars]all_path}

[testenv:static]
description = Run static analysis tests
deps =
    bandit[toml]
    toml
    -r{toxinidir}/requirements.txt
commands =
    bandit -c {toxinidir}/pyproject.toml -r {[vars]src_path} {[vars]tst_path}

[testenv:unit]
description = Run unit tests
deps =
    cosl
    coverage[toml]
    pytest
    -r{toxinidir}/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest --ignore={[vars]tst_path}integration -v --tb native -s {posargs}
    coverage report

[testenv:coverage-report]
description = Create test coverage report
deps =
    coverage[toml]
    pytest
    -r{toxinidir}/requirements.txt
commands =
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    websockets<14.0 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/tests/integration/requirements.txt
commands =
    pytest {[vars]tst_path} -v --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}

[testenv:integration-juju3]
description = Run integration tests using Juju 3
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/tests/integration/requirements_juju3.txt
commands =
    pytest {[vars]tst_path} -v --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}
